# This is a code I wrote to test inserting and updating random data in a SSMS database stored locally. 

import pyodbc

# Start with connecting to the database.

connect = None

try:
    connect = pyodbc.connect(Driver='SQL Server', host='localhost',
                             database='StoreTestDB', user='skyef',
                             password='testpassword')

except pyodbc.Error as e:
 print("Database connection unsuccessful. Please review and try again.")
    quit()

# Make a cursor to execute the query, starting with inserting data.

cursor = connect.cursor()

# Inserting the new data.

productID = 114
productName = "Tazo Tea: Earl Grey"
category: "Grocery"
subcategory: "Tea and Coffee"
price = 5.50
discount: 4.50
discounted: False
oosAmount: 10
currentStock: 25

sqlInsert = \
    "INSERT INTO products (productID, productName, category, subcategory, price, discount, discounted, oosAmount, currentStock)  \
     VALUES (?, ?, ?, ?)"

# This executes the query and commits the new information to the database.

try:
    cursor.execute(sqlInsert, productID, productName, category, subcategory, price, discount, discounted, oosAmount, currentStock))
    connect.commit()
    print("Product information added successfully.")

# Add an error message just in case.

except pyodbc.Error as e:
    print("Error adding person information. Please review and try again.")
    quit()

# Moving on to updating information in a different table.

contactNumber = "555-555-5555"
contactName = "David Mays"
supplierID = 10

sqlUpdate = \
    "UPDATE suppliers \
     SET contactNumber = ?, \
     contactName = ? \
     WHERE supplierID = ?"

# Executing the query and committing the new info.

try:

    cursor.execute(sqlUpdate, (contactNumber, contactName, supplierID))
    connect.commit()
    print("Supplier information updated successfully.")

except pyodbc.Error as e:

    print("Error updating supplier information. Please review and try again.")
    quit()

#Lastly, close the connection.

finally:

    connect.close()
